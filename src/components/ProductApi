import { IOrder, IProduct } from '../types';
import { Api, ApiListResponse } from './base/api';

export interface IProductAPI {
	getProductList: () => Promise<IProduct[]>;
	getProductItem: (id: string) => Promise<IProduct>;
	orderProducts: (order: IOrder) => Promise<IOrder>;
}

export class ProductAPI extends Api implements IProductAPI {
	constructor(baseUrl: string, options?: RequestInit) {
		super(baseUrl, options);
	}

	getProductItem(id: string): Promise<IProduct> {
		return this.get(`/product/${id}`).then((item: object) => item as IProduct);
	}

	getProductList(): Promise<IProduct[]> {
		return this.get('/product').then(
			(data: object) => (data as ApiListResponse<IProduct>).items
		);
	}

	orderProducts(order: IOrder): Promise<IOrder> {
		return this.post('/order', order).then((data: object) => data as IOrder);
	}
}
